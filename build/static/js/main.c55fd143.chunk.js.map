{"version":3,"sources":["models/Project.ts","components/Button.tsx","components/Divider.tsx","components/Logo.tsx","serializers/reposSerializer.ts","services/github.tsx","context/index.ts","components/ResultItem.tsx","components/ResultPane.tsx","components/SearchBox.tsx","components/Sidebar.tsx","components/Viewer.tsx","components/Wordmark.tsx","components/Version.tsx","components/SplashScreen.tsx","App.tsx","index.tsx"],"names":["Project","APP_NAME","APP_DESCRIPTION","APP_VERSION","SPLASH_TEXT","REPO_LINK","Button","pushRepos","onClick","Divider","Logo","className","split","join","reposSerializer","json","map","j","owner","login","avatar_url","name","description","octokit","Octokit","auth","process","defaultData","data","username","reponame","readme","repos","actions","setUsername","setReponame","setReadme","setRepos","fetchRepos","a","rest","listForUser","response","listPublic","slice","fetchRepoReadme","fetchReadme","repository","DataContext","createContext","ResultItem","repo","useContext","src","alt","ResultPane","useState","loading","setLoading","useEffect","text","length","idx","searchBoxConfig","type","required","placeholder","SearchBox","inputRef","useRef","ref","current","value","toLowerCase","Sidebar","Viewer","init","setInit","children","skipHtml","Wordmark","Version","href","target","SplashScreen","size","color","App","setTimeout","_defaultData","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c55fd143.chunk.js","sourcesContent":["interface IProject {\r\n    APP_NAME: string;\r\n    APP_DESCRIPTION: string;\r\n    APP_VERSION: string;\r\n    SPLASH_TEXT: string,\r\n    REPO_LINK: string,\r\n};\r\n\r\nconst Project: IProject = {\r\n    APP_NAME:        \"Get me\",\r\n    APP_DESCRIPTION: \"Easy access GitHub README.\",\r\n    APP_VERSION:     \"Beta\",\r\n    SPLASH_TEXT:     \"Patience is a virtue.\",\r\n    REPO_LINK:       \"https://github.com/vrfdivino/getme\",\r\n};\r\n\r\nexport default Project;","import { Project } from '../models';\r\nimport { ButtonProps } from '../models';\r\n\r\n/**\r\n * \r\n * The Button component in-charge of searching for GitHub users.\r\n * \r\n * @returns \r\n * \r\n */\r\nconst Button = ({ pushRepos }: ButtonProps ): JSX.Element => {\r\n\r\n    return <button onClick={ () => pushRepos() }>\r\n        { Project.APP_NAME }\r\n    </button>;\r\n    \r\n};\r\n\r\nexport default Button;","/**\r\n * \r\n * A simple divider component.\r\n * \r\n * @returns \r\n * \r\n */\r\nconst Divider = (): JSX.Element => <hr />;\r\n\r\nexport default Divider;","import { Project } from '../models';\r\n\r\n/**\r\n * \r\n * The Logo component of the app.\r\n * \r\n * @returns \r\n * \r\n */\r\nconst Logo = (): JSX.Element => {\r\n\r\n    return <div className=\"logo\">\r\n        { Project.APP_NAME.split(\" \").join(\"\") }.\r\n    </div>;\r\n    \r\n};\r\n\r\nexport default Logo;","import { Owner, Repo } from \"../models\";\r\n\r\n/**\r\n * \r\n * Serialize json object to Repo[].\r\n * \r\n * @param json The json object from GitHub API.\r\n * @returns \r\n * \r\n */\r\nconst reposSerializer = ( json: any[] ): Repo[] => {\r\n\r\n    const repos: Repo[] = json.map(j => {\r\n\r\n        let owner: Owner = {\r\n            login:      j.owner.login,\r\n            avatar_url: j.owner.avatar_url,\r\n        };\r\n\r\n        return {\r\n            name:        j.name,\r\n            description: j.description,\r\n            owner:       owner,\r\n        };\r\n    });\r\n\r\n    return repos;\r\n    \r\n};\r\n\r\nexport default reposSerializer;","import { Repo } from \"../models\";\r\nimport { reposSerializer } from \"../serializers\";\r\nimport { Octokit } from \"octokit\";\r\nimport { fetchReadme } from '@varandas/fetch-readme';\r\n\r\nconst octokit = new Octokit({ auth: process.env.REACT_APP_GITHUB_ACCESS_TOKEN });\r\n\r\n/**\r\n * \r\n * Fetch all the repos of the user.\r\n * \r\n * @param username The username to be searched.\r\n * @returns \r\n * \r\n */\r\nconst fetchRepos = async (username: string): Promise<Repo[]> => {\r\n\r\n    let response: any;;\r\n\r\n    try {\r\n        if (username) \r\n            response =  await octokit.rest.repos.listForUser({ username });\r\n        else \r\n            response = await octokit.rest.repos.listPublic();\r\n        return reposSerializer(response.data).slice(0,10);\r\n    } catch (e) {\r\n        response = [];\r\n    }\r\n\r\n    return response;\r\n\r\n};\r\n\r\n/**\r\n * \r\n * Fetch the readme.md of the user's repo.\r\n * \r\n * @param username \r\n * @param reponame \r\n * @returns \r\n */\r\nconst fetchRepoReadme = async (username: string, reponame: string): Promise<string> => {\r\n\r\n    let readme: string;\r\n    \r\n    try {\r\n        readme = await fetchReadme({ username: username, repository: reponame });\r\n    } catch (e) {\r\n        readme = \"\";\r\n    }\r\n\r\n    return readme;\r\n    \r\n};\r\n\r\nexport { fetchRepos , fetchRepoReadme };","import { createContext } from \"react\";\r\nimport { IData } from \"../models\";\r\nimport { fetchRepoReadme, fetchRepos } from \"../services/github\";\r\n\r\nconst defaultData: IData = {\r\n    data: {\r\n        username: null,\r\n        reponame: null,\r\n        readme: \"\",\r\n        repos: [],\r\n    },\r\n    actions: {\r\n        setUsername: () => {},\r\n        setReponame: () => {},\r\n        setReadme: () => {},\r\n        setRepos: () => {},\r\n        fetchRepos: fetchRepos,\r\n        fetchRepoReadme: fetchRepoReadme,\r\n    },\r\n};\r\n\r\nconst DataContext = createContext<IData>(defaultData);\r\n\r\nexport { DataContext, defaultData };","import { useContext } from 'react';\r\nimport { ResultItemProps } from '../models';\r\nimport { DataContext } from '../context';\r\n\r\n/**\r\n * \r\n * The ResultItem component will be use as a placeholder for search results.\r\n * \r\n * @param props  \r\n * @returns \r\n */\r\nconst ResultItem = ({ repo }: ResultItemProps): JSX.Element => {\r\n\r\n    let { actions } = useContext(DataContext);\r\n\r\n    /**\r\n     * \r\n     * This function will set the repo to be fetch by the readme viewer.\r\n     * \r\n     */\r\n    const pushReadme = () => { actions.setReponame(repo.name); };\r\n\r\n    return (\r\n        <div className=\"item\" onClick={ () => pushReadme() }>\r\n            <div className=\"active\"></div>\r\n            <div className=\"item-avatar\">\r\n                <img src={ repo.owner.avatar_url } alt=\"\" className=\"avatar\" />\r\n            </div>\r\n            <div className=\"item-content\">\r\n                <p className=\"username\">{ repo.owner.login }</p>\r\n                <p className=\"reponame\">{ repo.name }</p>\r\n                <p className=\"repodesc\">{ repo.description }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default ResultItem;","import ResultItem from \"./ResultItem\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"../context\";\r\nimport { Wordmark } from \".\";\r\n\r\n/**\r\n * \r\n * The ResultPane component will display search results.\r\n * \r\n * @param props\r\n * @returns \r\n * \r\n */\r\nconst ResultPane = (): JSX.Element => {\r\n\r\n    const { data, actions } = useContext(DataContext);\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n\r\n        (async () => {\r\n            actions.setRepos(await actions.fetchRepos(data.username));\r\n        })();\r\n\r\n        if (data.username !== null) setLoading(false);\r\n\r\n    }, [actions, data.username]);\r\n\r\n    return (\r\n        <div className=\"pane\">\r\n            { \r\n                loading ?\r\n                <Wordmark text=\"Please wait...\" /> :\r\n                !loading && data.repos.length === 0 ?\r\n                <Wordmark text={`No repos found for ${ data.username }.`} /> :\r\n                data.repos.map((repo, idx) => <ResultItem key={ idx } repo={ repo } />)\r\n            }\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default ResultPane;","import { useContext, useRef } from 'react';\r\nimport { Button } from '.';\r\nimport { DataContext } from '../context';\r\nimport { SearchBoxConfig } from '../models';\r\n\r\nconst searchBoxConfig: SearchBoxConfig = {\r\n    className:   \"searchbox\",\r\n    type:        \"text\",\r\n    required:    true,\r\n    placeholder: \"Search for username\",\r\n};\r\n\r\n/**\r\n * \r\n * The SearhBox component to search for GitHub user.\r\n * \r\n * @returns \r\n * \r\n */\r\nconst SearchBox = (): JSX.Element => {\r\n\r\n    const { actions } = useContext(DataContext);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    /**\r\n     * \r\n     * Search for all repos related to the GitHub username.\r\n     * \r\n     */\r\n    const pushRepos = () => {\r\n        if (inputRef.current != null) {\r\n            actions.setUsername(inputRef.current.value.toLowerCase());\r\n            inputRef.current.value = \"\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input ref={ inputRef } { ...searchBoxConfig } />\r\n            <Button pushRepos={ pushRepos } />\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default SearchBox;","import Logo from \"./Logo\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport Divider from \"./Divider\";\r\nimport ResultPane from \"./ResultPane\";\r\n\r\n/**\r\n * \r\n * Sidebar component for searching and displaying results.\r\n * \r\n * @returns \r\n */\r\nconst Sidebar = (): JSX.Element => {\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"header\">\r\n                <Logo />\r\n                <SearchBox />\r\n            </div>\r\n            <Divider />\r\n            <ResultPane />\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Sidebar;","import { useContext, useEffect, useState } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { DataContext } from '../context';\r\nimport { Wordmark } from '.';\r\nimport Project from '../models/Project';\r\n\r\n/**\r\n * \r\n * The Viewer component to view readme.\r\n * \r\n * @returns \r\n * \r\n */\r\nconst Viewer = (): JSX.Element => {\r\n\r\n    const { data, actions } = useContext(DataContext);\r\n    const [init, setInit] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n\r\n        (async () => {\r\n            actions.setReadme(await actions.fetchRepoReadme(data.username, data.reponame));\r\n            setInit(init+1);\r\n        })();\r\n        \r\n    }, [actions, init, data.username, data.reponame]);\r\n\r\n    return (\r\n        <div className=\"viewer\">\r\n            {\r\n                data.readme !== \"\" ?\r\n                <ReactMarkdown children={ data.readme } skipHtml={ true }/> :\r\n                init === 1 ?\r\n                <Wordmark text={ Project.APP_DESCRIPTION } /> :\r\n                <Wordmark text={`No README.md available for repo ${ data.reponame }.`} /> \r\n            }\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Viewer;","import { WordmarkProps } from \"../models\";\r\nimport Logo from \"./Logo\";\r\n\r\n/**\r\n * \r\n * The Wordmark component.\r\n * \r\n * @param text The subtitle of the wordmark.\r\n * @returns \r\n * \r\n */\r\nconst Wordmark = ({ text }: WordmarkProps): JSX.Element => {\r\n\r\n    return (\r\n        <div className=\"wordmark\">\r\n            <Logo />\r\n            <span>{ text }</span>\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default Wordmark;","import Project from \"../models/Project\";\n\n/**\n * \n * The Version flag to display.\n * \n * @returns \n * \n */\nconst Version = (): JSX.Element => {\n\n    return (\n        <div className=\"version\">\n            <a href={ Project.REPO_LINK } target=\"_blank\" className=\"brand\">{ Project.APP_NAME.split(\" \").join(\"\") }.</a>\n            <span className=\"sep\">|</span>\n            <div className=\"desc\">{ Project.APP_DESCRIPTION }</div>\n            <span className=\"sep\">|</span>\n            <span className=\"vversion\">{ Project.APP_VERSION }</span>\n        </div>\n    );\n    \n};\n\nexport default Version;","import { PacmanLoader } from \"react-spinners\";\nimport Project from \"../models/Project\";\n\n/**\n * \n * The init screen to load before booting up the app.\n * \n * @returns \n * \n */\nconst SplashScreen = (): JSX.Element => {\n    return (\n        <div className=\"splash\">\n            <PacmanLoader size={ 10 } color=\"white\" />\n            <p>{ Project.SPLASH_TEXT }</p>\n        </div>\n    );\n};\n\nexport default SplashScreen;","import { Sidebar, Version, Viewer } from './components';\r\nimport { useEffect, useState } from 'react';\r\nimport { Repo } from './models';\r\nimport { DataContext, defaultData } from './context';\r\nimport SplashScreen from './components/SplashScreen';\r\n\r\n/**\r\n * \r\n * The App component.\r\n * \r\n * @returns \r\n */\r\nconst App = (): JSX.Element => {\r\n\r\n  const [username, setUsername] = useState<string>(\"\");\r\n  const [reponame, setReponame] = useState<string>(\"\");\r\n  const [readme, setReadme] = useState<string>(\"\");\r\n  const [repos, setRepos] = useState<Repo[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => { setLoading(false); }, 5000);\r\n  });\r\n\r\n  let data = {\r\n    username,\r\n    reponame,\r\n    readme,\r\n    repos\r\n  };\r\n\r\n  let actions = {\r\n    ...defaultData.actions,\r\n    setUsername,\r\n    setReponame,\r\n    setReadme,\r\n    setRepos,\r\n  };\r\n\r\n  let _defaultData = { \r\n    ...defaultData,\r\n    data,\r\n    actions,\r\n  };\r\n\r\n  return loading ?\r\n  <SplashScreen /> :\r\n  (\r\n    <DataContext.Provider value={ _defaultData }>\r\n      <Version />\r\n      <div className=\"app\">\r\n        <Sidebar />\r\n        <Viewer />\r\n      </div>\r\n    </DataContext.Provider>\r\n  );\r\n\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport \"./css/styles.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}